---
title: "STAT 331 Portfolio"
author: "Joaquin Arredondo"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 3 - Q2
teacher_evals <- read_csv(here("Week 3", "Lab 3", "teacher_evals.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 2 - Q1
surveys <- read_csv(here::here("week2","lab2","surveys.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# Checkin 2
ages_xlsx <- read_excel("Ages_Data/ages.xlsx")


```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

teacher_evals_clean <-
  teacher_evals |>
  filter(no_participants >= 10) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree, seniority, gender) |>
  rename(sex = gender) |>
  mutate(
    across(c(course_id, teacher_id), as.character),
    question_no        = as.integer(question_no),
    academic_degree    = as.factor(academic_degree),
    seniority          = as.integer(seniority),
    sex                = as.factor(sex),
    SET_score_avg      = as.numeric(SET_score_avg),
    percent_failed_cur = as.numeric(percent_failed_cur),
    resp_share         = as.numeric(resp_share),
    no_participants    = as.integer(no_participants)
  )

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

# Lab 3 - Q7 (Revised)

instructors <- teacher_evals_clean |>
  select(-c(course_id, question_no, SET_score_avg, percent_failed_cur, resp_share, no_participants)) |>
  distinct(teacher_id, .keep_all = TRUE) 

instructors |> count(academic_degree)
instructors |>  
  summarize(
    avg_seniority = mean(seniority,  na.rm = TRUE),
    n_male = sum(sex == "male"),
    n_female = sum(sex == "female")
  ) 


```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# Lab 3 - Q9 (Revised)
teacher_evals_clean |> 
  select(contains("_id"), question_no) |>
  group_by(teacher_id, course_id) |>
  summarise(
    n_combo = n_distinct(question_no),
    .groups = "drop"
  ) |>
  filter(n_combo == 9) |>
  nrow()


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 - Q9
teacher_evals_clean |> 
  select(contains("_id"), question_no) |>
  group_by(teacher_id, course_id) |>
  summarise(
    n_combo = n_distinct(question_no),
    .groups = "drop"
  ) |>
  filter(n_combo == 9) |>
  nrow()

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 - Q11
teacher_evals_clean |>
  filter(seniority == 1) |>
  distinct(teacher_id, course_id, percent_failed_cur) |>
  group_by(teacher_id) |>
  summarise(
    avg_failing = mean(percent_failed_cur, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(avg_failing == max(avg_failing) | avg_failing == min(avg_failing))



```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 3 - Q12
teacher_evals_clean |> 
  filter(academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id, seniority, sex) |>
  summarise(
    avg_eval_resp = mean(resp_share, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(avg_eval_resp == max(avg_eval_resp) | avg_eval_resp == min(avg_eval_resp))
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5 - Finding Membership & Platnumber in database

get_fit_now_check_in |> 
  left_join(get_fit_now_member,
            by = join_by(membership_id == id)) |>
  left_join(person,
            by = join_by(person_id == id)) |>
  left_join(drivers_license,
            by = join_by(license_id == id)) |>
  filter (
    str_starts(membership_id, "48Z"),
    check_in_date == 20180109,
    membership_status == "gold",
    str_detect(plate_number, "H42W")
    ) 

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5 - Revised to include Lubridate Functions to filter dates
get_fit_now_check_in |> 
  filter(check_in_date == ymd("2018-01-09")) |>
  left_join(get_fit_now_member,
            by = join_by(membership_id == id)) |>
  left_join(person,
            by = join_by(person_id == id)) |>
  left_join(drivers_license,
            by = join_by(license_id == id)) |>
  filter (
    str_starts(membership_id, "48Z"),
    membership_status == "gold",
    str_detect(plate_number, "H42W")
    ) 

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Lab 4 - Q10 ~ made q1_avg_rating
teacher_evals_clean |> 
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(
    n_courses = n_distinct(course_id),
    q1_avg_rating = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter (n_courses >= 5) |>
  filter(q1_avg_rating == max(q1_avg_rating) | q1_avg_rating == min(q1_avg_rating))

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2
# Lab 4 - Q12 ~ made avg_eval_resp
teacher_evals_clean |> 
  filter(academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id, seniority, sex) |>
  summarise(
    avg_eval_resp = mean(resp_share, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(avg_eval_resp == max(avg_eval_resp) | avg_eval_resp == min(avg_eval_resp))


```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# Lab 4 - Q7 ~ fct_recode
library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Lab 4 - Q7 ~ fct_relevel

library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 4, Q4 ~ str_remove
ca_childcare <- ca_childcare |>
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(
    region = fct_collapse(
      county_name,
      "Los Angeles" = la_county,
      "Orange County" = orange_county,
      "San Diego–Imperial" = san_diego_imperial_counties,
      "Inland Empire" = inland_counties,
      "Southern San Joaquin Valley" = s_san_joaquin_counties,
      "Northern San Joaquin Valley" = n_san_joaquin_counties,
      "Central Coast" = central_coast_counties,
      "San Francisco Bay Area" = san_fran_counties,
      "North Coast" = north_coast_counties,
      "Superior California" = superior_counties
    )
)

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# Lab 5 - Mutating dates to be lubridate

crime_scene_report <- crime_scene_report |>
mutate(date = ymd(date))

facebook_event_checkin <- facebook_event_checkin |>
mutate(date = ymd(date))

get_fit_now_check_in <- get_fit_now_check_in |>
mutate(check_in_date = ymd(check_in_date))

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Lab 5 - Trying to find primary suspect by combining datasets
get_fit_now_check_in |> 
  filter(check_in_date == ymd("2018-01-09")) |>
  left_join(get_fit_now_member,
            by = join_by(membership_id == id)) |>
  left_join(person,
            by = join_by(person_id == id)) |>
  left_join(drivers_license,
            by = join_by(license_id == id)) |>
  filter (
    str_starts(membership_id, "48Z"),
    membership_status == "gold",
    str_detect(plate_number, "H42W")
    ) 


```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

# Lab 5 - (Revised) for creating the database for interview x person
interview_person <- right_join(x = person,
                              y = interview,
                              by = join_by(id == person_id)
                    ) |>
                    filter(!is.na(name) ) |>
                    select(person_id,
                           name,
                           transcript)

# Now that it is a right join, interview will be matched with person, but right database is reserved.
# Not every interview will be guaranteed a person, so we must filter out N/A values for person/name.



```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

# Lab 5 - combining person and interview, wanna keep list of people but I wanna attach interviews if they have it!
# Example of left_join, but person is preserved. 

interview_person <- left_join(x = person,
                              y = interview,
                              by = join_by(id == person_id)
                    )

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
