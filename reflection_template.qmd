---
title: "STAT 331 Portfolio"
author: "Joaquin Arredondo"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 3 - Q2
teacher_evals <- read_csv(here("Week 3", "Lab 3", "teacher_evals.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 2 - Q1
surveys <- read_csv(here::here("week2","lab2","surveys.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# Checkin 2
ages_xlsx <- read_excel("Ages_Data/ages.xlsx")


```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Lab 3 - Q5
teacher_evals_clean <-
  teacher_evals |>
  filter(no_participants >= 10) |>
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree, seniority, gender) |>
  rename(sex = gender) |>
  mutate(
    across(c(course_id, teacher_id), as.character),
    question_no        = as.integer(question_no),
    academic_degree    = as.factor(academic_degree),
    seniority          = as.integer(seniority),
    sex                = as.factor(sex),
    SET_score_avg      = as.numeric(SET_score_avg),
    percent_failed_cur = as.numeric(percent_failed_cur),
    resp_share         = as.numeric(resp_share),
    no_participants    = as.integer(no_participants)
  )

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

# Lab 3 - Q7 (Revised)

instructors <- teacher_evals_clean |>
  select(-c(course_id, question_no, SET_score_avg, percent_failed_cur, resp_share, no_participants)) |>
  distinct(teacher_id, .keep_all = TRUE) 

instructors |> count(academic_degree)
instructors |>  
  summarize(
    avg_seniority = mean(seniority,  na.rm = TRUE),
    n_male = sum(sex == "male"),
    n_female = sum(sex == "female")
  ) 


```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# Lab 3 - Q9 (Revised)
teacher_evals_clean |> 
  select(contains("_id"), question_no) |>
  group_by(teacher_id, course_id) |>
  summarise(
    n_combo = n_distinct(question_no),
    .groups = "drop"
  ) |>
  filter(n_combo == 9) |>
  nrow()


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
# Lab 3 - Q9
teacher_evals_clean |> 
  select(contains("_id"), question_no) |>
  group_by(teacher_id, course_id) |>
  summarise(
    n_combo = n_distinct(question_no),
    .groups = "drop"
  ) |>
  filter(n_combo == 9) |>
  nrow()

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2
# Lab 3 - Q11
teacher_evals_clean |>
  filter(seniority == 1) |>
  distinct(teacher_id, course_id, percent_failed_cur) |>
  group_by(teacher_id) |>
  summarise(
    avg_failing = mean(percent_failed_cur, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(avg_failing == max(avg_failing) | avg_failing == min(avg_failing))



```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
# Lab 3 - Q12
teacher_evals_clean |> 
  filter(academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id, seniority, sex) |>
  summarise(
    avg_eval_resp = mean(resp_share, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(avg_eval_resp == max(avg_eval_resp) | avg_eval_resp == min(avg_eval_resp))
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5 - Finding Membership & Platnumber in database

get_fit_now_check_in |> 
  left_join(get_fit_now_member,
            by = join_by(membership_id == id)) |>
  left_join(person,
            by = join_by(person_id == id)) |>
  left_join(drivers_license,
            by = join_by(license_id == id)) |>
  filter (
    str_starts(membership_id, "48Z"),
    check_in_date == 20180109,
    membership_status == "gold",
    str_detect(plate_number, "H42W")
    ) 

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5 - Revised to include Lubridate Functions to filter dates
get_fit_now_check_in |> 
  filter(check_in_date == ymd("2018-01-09")) |>
  left_join(get_fit_now_member,
            by = join_by(membership_id == id)) |>
  left_join(person,
            by = join_by(person_id == id)) |>
  left_join(drivers_license,
            by = join_by(license_id == id)) |>
  filter (
    str_starts(membership_id, "48Z"),
    membership_status == "gold",
    str_detect(plate_number, "H42W")
    ) 

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Lab 4 - Q10 ~ made q1_avg_rating
teacher_evals_clean |> 
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(
    n_courses = n_distinct(course_id),
    q1_avg_rating = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter (n_courses >= 5) |>
  filter(q1_avg_rating == max(q1_avg_rating) | q1_avg_rating == min(q1_avg_rating))

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2
# Lab 4 - Q12 ~ made avg_eval_resp
teacher_evals_clean |> 
  filter(academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id, seniority, sex) |>
  summarise(
    avg_eval_resp = mean(resp_share, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(avg_eval_resp == max(avg_eval_resp) | avg_eval_resp == min(avg_eval_resp))


```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
# Lab 4 - Q7 ~ fct_recode
library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Lab 4 - Q7 ~ fct_relevel

library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 4, Q4 ~ str_remove
ca_childcare <- ca_childcare |>
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(
    region = fct_collapse(
      county_name,
      "Los Angeles" = la_county,
      "Orange County" = orange_county,
      "San Diego–Imperial" = san_diego_imperial_counties,
      "Inland Empire" = inland_counties,
      "Southern San Joaquin Valley" = s_san_joaquin_counties,
      "Northern San Joaquin Valley" = n_san_joaquin_counties,
      "Central Coast" = central_coast_counties,
      "San Francisco Bay Area" = san_fran_counties,
      "North Coast" = north_coast_counties,
      "Superior California" = superior_counties
    )
)

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# Lab 5 - Mutating dates to be lubridate

crime_scene_report <- crime_scene_report |>
mutate(date = ymd(date))

facebook_event_checkin <- facebook_event_checkin |>
mutate(date = ymd(date))

get_fit_now_check_in <- get_fit_now_check_in |>
mutate(check_in_date = ymd(check_in_date))

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
# Lab 5 - Trying to find primary suspect by combining datasets
get_fit_now_check_in |> 
  filter(check_in_date == ymd("2018-01-09")) |>
  left_join(get_fit_now_member,
            by = join_by(membership_id == id)) |>
  left_join(person,
            by = join_by(person_id == id)) |>
  left_join(drivers_license,
            by = join_by(license_id == id)) |>
  filter (
    str_starts(membership_id, "48Z"),
    membership_status == "gold",
    str_detect(plate_number, "H42W")
    ) 


```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

# Lab 5 - (Revised) for creating the database for interview x person
interview_person <- right_join(x = person,
                              y = interview,
                              by = join_by(id == person_id)
                    ) |>
                    filter(!is.na(name) ) |>
                    select(person_id,
                           name,
                           transcript)

# Now that it is a right join, interview will be matched with person, but right database is reserved.
# Not every interview will be guaranteed a person, so we must filter out N/A values for person/name.



```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

# Lab 5 - combining person and interview, wanna keep list of people but I wanna attach interviews if they have it!
# Example of left_join, but person is preserved. 

interview_person <- left_join(x = person,
                              y = interview,
                              by = join_by(id == person_id)
                    )

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

# Lab 5 - (Revision)
# inner_join, means that both entries can't be N/A, they must match to be reserved.

suspect_strict <- get_fit_now_check_in |>
  filter(
    check_in_date == ymd("2018-01-09")
    ) |>
  inner_join(get_fit_now_member, 
             by = join_by(membership_id == id)) |>
  inner_join(person, 
             by = join_by(person_id == id)) |>
  inner_join(drivers_license, 
             by = join_by(license_id == id)) |>
  filter(
    str_starts(membership_id, "48Z"),
    membership_status == "gold",
    str_detect(plate_number, "H42W")
  ) |>
  select(person_id, name, membership_id, membership_status, plate_number) |>
  distinct()

suspect_strict

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

# Lab 5 - (Revision)
# In this case, if we do a inner join it reserves the same thing we want/need.
# inner joins are gauranteeing there are no people in our rows that contain missing data.

main_suspect <- person |> 
  inner_join(drivers_license,
            by = join_by(license_id == id)) |>
  inner_join(income,
            by = join_by(ssn == ssn)) |>
  inner_join(interview,
            by = join_by(id == person_id)) |>
  inner_join(facebook_event_checkin, 
            by = join_by(id == person_id)) |>
  filter(
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    gender == "female",
    height %in% c(65, 66, 67),
    event_name == "SQL Symphony Concert"
  ) 

main_suspect
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# Lab 5 confirming that our main suspect has 0 transcripts and needs to be further investigated or that our 
# previous suspect was lying!

interview |>
  semi_join(main_suspect,
            by = join_by(person_id == id)) |>
  pull(transcript)



```

-   `anti_join()`

```{r}
#| label: wd-6-anti
# Lab 5 ~ List of Suspects that didn't show up that time said from our main suspect.
person |>
  anti_join(facebook_event_checkin |> 
               filter(event_name == "SQL Symphony Concert",
                      year(date) == 2017, month(date) == 12),
            by = join_by(id == person_id))

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4 - Q7

library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4 - Q5
median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE), 
    .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "median_income_"
  ) |>
  arrange(desc(median_income_2018))
  median_household_income
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 3
-   Lab 4
-   Challenge 4
-   Lab 2
-   Lab 2 Challenge

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 4 - Q7

library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
# Lab 3 - Q5
teacher_evals_clean <-
  teacher_evals |>
  select(course_id, teacher_id, question_no, no_participants, resp_share,
         SET_score_avg, percent_failed_cur, academic_degree, seniority, gender) |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(
    across(c(course_id, teacher_id), as.character),
    question_no        = as.integer(question_no),
    academic_degree    = as.factor(academic_degree),
    seniority          = as.integer(seniority),
    sex                = as.factor(sex),
    SET_score_avg      = as.numeric(SET_score_avg),
    percent_failed_cur = as.numeric(percent_failed_cur),
    resp_share         = as.numeric(resp_share),
    no_participants    = as.integer(no_participants)
  )
  

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
# Lab 4 - Q8
ca_childcare |>
  ggplot(aes(x = mhi_2018, y = mc_infant)) +
  geom_point(color = "orange", alpha = 0.6, size = 1.5) +   # orange + transparency
  geom_smooth(method = "lm", color = "darkorange", se = FALSE, size = 0.8) +  # darker line
  labs(
    x = "Median household income (2018 dollars)",
    y = "Weekly full-time median price (Infant, center-based)",
    title = "Income vs. Infant Childcare Costs in California (2008–2018)"
  ) +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 5),
    axis.text.y = element_text(size = 5),
    axis.title.x = element_text(size = 8),
    axis.title.y = element_text(size = 7),
    plot.title = element_text(size = 8, face = "bold"),
    panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
    panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
    panel.background = element_rect(fill = "white")
  )

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
# Lab 2 - Q8
sex_cols <- c(F = "#6a3d9a", M = "#1f78b4")
ggplot(data = surveys,
       mapping = aes(x = sex, y = weight, color = sex)) +
       geom_jitter(alpha = 0.2, color = "orange3") +
       geom_boxplot(outlier.shape = NA) +
       scale_color_manual(values = sex_cols) +
       labs(
        title = "Distribution of Rodent Weights by Species",
        x = "Species",
        y = NULL,
        subtitle = "Weight (g)"
      ) +
       theme(
        axis.text.x = element_text(angle = 45, hjust = 1),  # rotate species labels
        plot.title = element_text(face = "bold", color = "purple", size = 18),
        panel.border = element_rect(color = "grey35", fill = NA, linewidth = 0.8)  # border
      )
     

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat
# Lab 4 - Q7
library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )
      

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date
# Lab 4 - Q7

library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )
      

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
# Challenge 2 - (Revised): added a facet to seperate data and make it look clearer side by side
sex_cols <- c(F = "#6a3d9a", M = "#1f78b4")

ggplot(surveys, aes(x = species, y = weight, color = sex)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.25, width = 0.15) +
  scale_color_manual(values = sex_cols) +
  labs(
    title = "Distribution of Rodent Weights by Species",
    subtitle = "Sex: <span style='color:#6a3d9a;'>Female (F)</span> and <span style='color:#1f78b4;'>Male (M)</span>",
    x = "Species",
    y = "Weight (g)"
  ) +
  theme_bw() +
  theme(
    legend.position = "none",
    plot.subtitle = ggtext::element_markdown(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +  
  facet_wrap(~ sex)

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
# Lab 4 - Q8 (Revised) ~ changed line to be complementary color and more visable.
ca_childcare |>
  ggplot(aes(x = mhi_2018, y = mc_infant)) +
  geom_point(color = "orange", alpha = 0.6, size = 1.5) +   # orange + transparency
  geom_smooth(method = "lm", color = "darkturquoise", se = FALSE, size = 0.8) +  # darker line
  labs(
    x = "Median household income (2018 dollars)",
    y = "Weekly full-time median price (Infant, center-based)",
    title = "Income vs. Infant Childcare Costs in California (2008–2018)"
  ) +
  theme(
    aspect.ratio = 1,
    axis.text.x = element_text(size = 5),
    axis.text.y = element_text(size = 5),
    axis.title.x = element_text(size = 8),
    axis.title.y = element_text(size = 7),
    plot.title = element_text(size = 8, face = "bold"),
    panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
    panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
    panel.background = element_rect(fill = "white")
  )
      



```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

# Challenge 4 - Q4

library(ggplot2)
library(forcats)

summary_table |>
  mutate(region = fct_reorder(region, gap)) |>
  ggplot(aes(x = region, 
             y = gap,
             color = fct_reorder(.f = region,
                                 .x = gap))) +
  geom_point(size = 1) +
  coord_flip() +
  facet_wrap(~age, ncol = 1) +
  labs(
    title = "Price Gap by Region and Age — California, 2018",
    subtitle = "More Negative means Center-based care costs more | Gap = (Family − Center)",
    x = NULL, 
    y = "Weekly Price Gap ($)",
    color = "California Regions"
  ) +
  theme_minimal(base_size = 11) + 
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 5),
    axis.title.x = element_text(size = 8), 
    plot.title = element_text(size = 10, face = "bold"),
    plot.subtitle = element_text(size = 5, face = "italic"),
    panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
    panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
    panel.background = element_rect(fill = "white"),
    legend.position = "none"     
  )



```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
# Challenge 2 - Hot ~ angeled the x-axis to be more readable 

sex_cols <- c(F = "#6a3d9a", M = "#1f78b4")

ggplot(surveys, aes(x = species, y = weight, color = sex)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.25, width = 0.15) +
  scale_color_manual(values = sex_cols) +
  labs(
    title = "Distribution of Rodent Weights by Species",
    subtitle = "Sex: <span style='color:#6a3d9a;'>Female (F)</span> and <span style='color:#1f78b4;'>Male (M)</span>",
    x = "Species",
    y = "Weight (g)"
  ) +
  theme_bw() +
  theme(
    legend.position = "none",
    plot.subtitle = ggtext::element_markdown(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +  
  facet_wrap(~ sex)

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
# Lab 4 - Q7
ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

# Lab 4 - Q7
ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

# Challenge 4 - Q4

summary_table |>
  mutate(region = fct_reorder(region, gap)) |>
  ggplot(aes(x = region, 
             y = gap,
             color = fct_reorder(.f = region,
                                 .x = gap))) +
  geom_point(size = 1) +
  coord_flip() +
  facet_wrap(~age, ncol = 1) +
  labs(
    title = "Price Gap by Region and Age — California, 2018",
    subtitle = "More Negative means Center-based care costs more | Gap = (Family − Center)",
    x = NULL, 
    y = "Weekly Price Gap ($)",
    color = "California Regions"
  ) +
  theme_minimal(base_size = 11) + 
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 5),
    axis.title.x = element_text(size = 8), 
    plot.title = element_text(size = 10, face = "bold"),
    plot.subtitle = element_text(size = 5, face = "italic"),
    panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
    panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
    panel.background = element_rect(fill = "white"),
    legend.position = "none"     
  )


```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2





```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 3 - Q7
instructors <- teacher_evals_clean |>
    select(teacher_id, academic_degree, seniority, sex) |>
    distinct(teacher_id, .keep_all = TRUE) 
instructors |>  count(academic_degree)
instructors |>  
  summarize(
    avg_seniority = mean(seniority,  na.rm = TRUE),
    n_male = sum(sex == "male"),
    n_female = sum(sex == "female")
  ) 

```

-   Example using `across()`

```{r}
#| label: dvs-4-across
# Lab 3 - Q3 (Revised)

instructors <- teacher_evals_clean |>
    select(teacher_id, academic_degree, seniority, sex) |>
    distinct(teacher_id, .keep_all = TRUE)

instructors |>  count(academic_degree)

instructors |>
  summarise(
    across(
      .cols = c(seniority),
      .fns =  c(min = min, 
                max = max, 
                mean = mean, 
                median = median)
    ),
    n_male = sum(sex == "male"),
    n_female = sum(sex == "female"),
  )


```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 3 - Q12

teacher_evals_clean |> 
  filter(academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id, seniority, sex) |>
  summarise(
    avg_eval_resp = mean(resp_share, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(avg_eval_resp == max(avg_eval_resp) | avg_eval_resp == min(avg_eval_resp))


```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 4 - Q5

median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE), 
    .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "median_income_"
  ) |>
  arrange(desc(median_income_2018))
  median_household_income


```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
library(RColorBrewer)
# Lab 4 - Q7
ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

# Lab 4 - Q5 (Revised) added kable() via course website to make tables nicer

library(knitr)

median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE), 
    .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "median_income_"
  ) |>
  arrange(desc(median_income_2018)) |>
  kable()

  median_household_income

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3


# Lab 4 - Q7
ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1


# Lab 4 - Q7
ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2
# Lab 4 - Q5
median_household_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE), 
    .groups = "drop") |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "median_income_"
  ) |>
  arrange(desc(median_income_2018))
  median_household_income


```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Challenge 4 - Q3
summary_table <- ca_childcare |>
  filter(study_year == 2018) |>
  select(region,
         mc_infant, mc_toddler, mc_preschool,
         mfcc_infant, mfcc_toddler, mfcc_preschool) |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool,
             mfcc_infant, mfcc_toddler, mfcc_preschool),
    names_to = c("setting","age"),
    names_sep = "_", # kind-age-group _ is the delimiter
    values_to = "price"
  ) |>
  # Change data to make it easier to work with
  mutate(
    setting = recode(setting, mc = "Center", mfcc = "Family"), #change mc and mfcc to be more readible
    age = recode(age,
                 infant = "Infant",
                 toddler = "Toddler",
                 preschool = "Preschool")
  )|> group_by(region, age, setting) |>
  summarise(
    median_price = median(price, na.rm = TRUE), 
    .groups = "drop"
  ) |>
  pivot_wider(
    names_from = setting, 
    values_from = median_price
  ) |>
  mutate(
    gap = Family - Center
  ) |>
  arrange(age, 
          desc(gap)
  )

summary_table |>   
  group_by(age) |>
  slice_min(order_by = gap, n = 3, with_ties = FALSE) |>
  arrange(age, gap) |>
  ungroup()

```

-   using `across()`

```{r}
#| label: pe-1-across
# Lab 3 - Q5 (Revised) uses across to make value points into correct typing
teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |>
  filter(no_participants >= 10) |> 
  select(course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) |>
  mutate(
    across(.cols = course_id:teacher_id, .fns = as.character),
    across(.cols = c(academic_degree, sex), .fns = as.factor),
    across(.cols = c(question_no, seniority, no_participants), .fns = as.integer),
    across(.cols = c(SET_score_avg, percent_failed_cur, resp_share), .fns = as.numeric)
  )


```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
# Challenge 3 - Q1
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(
    SET_level = case_when(
      SET_score_avg >= 4 ~ "excellent",
      TRUE               ~ "standard"
    ),
    sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority <= 8 ~ "senior",
      TRUE           ~ "very senior"
    )
  ) |>
  select(course_id, SET_level, sen_level)

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
# Lab 4 - Q7
library(RColorBrewer)

ca_childcare |>
     pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool),
               names_to = "age_group",
               values_to = "median_age_group") |>
     mutate(
      age_group = fct_recode(age_group,
        "Infant" = "mc_infant",
        "Toddler" = "mc_toddler",
        "Preschool" = "mc_preschool" ),
      age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
     ggplot(mapping = 
             aes(x = study_year, 
                 y = median_age_group, 
                 color = fct_reorder2(.f = region,
                                      .x = study_year,
                                      .y = median_age_group)
                 )
           ) +
      geom_point(size = 0.8) +
      geom_smooth(method = "loess", span = 0.9, size = 0.6) +
      facet_grid(~age_group) +
      scale_color_manual(values = brewer.pal(10, "BrBG")) +
      labs(#
        x = "Study Year",
        y = NULL, 
        title = "Weekly Median Price for Centered-Based Childcare ($)",
        color = "California Region"
          ) +
      scale_x_continuous(
        limits = c(2008,2018),
        breaks = seq(2008, 2018, 2)
      ) +
      theme(
        aspect.ratio = 1,
        axis.text.x = element_text(size = 5),
        axis.text.y = element_text(size = 5),
        axis.title.x = element_text(size = 8), 
        plot.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10),
        legend.key.size = unit(0.4, "cm"),  
        legend.key.height = unit(0.4, "cm"),      
        legend.key.width  = unit(0.4, "cm"),
        panel.grid.major = element_line(color = "gray90", linewidth = 0.55),
        panel.grid.minor = element_line(color = "gray90", linewidth = 0.2),
        panel.background = element_rect(fill = "white")
      )
      

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1


```

-   Example 2

```{r}
#| label: dsm-1-2



```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
# Challenge 3 - Q3 
chisq.test(
  x = teacher_evals_compare$SET_level,
  y = teacher_evals_compare$sen_level
) 

```

-   Example 2

```{r}
#| label: dsm-2-2
# Lab 2 - Q17
species_mod <- aov(weight ~ species, data = surveys)
summary(species_mod)

```

-   Example 3

```{r}
#| label: dsm-2-3

# Lab 1 - T Test Conclusion
t.test(len ~ supp, data = ToothGrowth,
       var.equal = FALSE,   # assume unequal variances
       alternative = "two.sided")

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Coming into this course as a 4th year computer science student, I have taken a handle of similar classes like Databases and Theory of Computation so a lot of these ideas, functions and libraries that we are learning are just a means to what I already know! But something these classes didn't teach me was how to visualize, clean-up and go into these type of spaces with storytelling in mind. So every time I am approached with an assignment question, I always ask myself: What is the table going to look like? What do I need? What do I ultimately want? and What tools do I know I can use to help me? When revising some code snippets, I realized there were more intuitive, easier approaches to curtain problems and I didn't choose the naive approach and challenged my way of thinking I would have set myself up later on to demonstrate these learn objectives.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I think I extended my thinking throughout the course so far by proactively trying to be a "lazy coder", this is a idea that was taught to me in my other classes and it is centered around efficiency and optimization. What can I do to make my life easier as a programmer? That's why I really value the feedback I get back on my labs and challenges because most of the time, its an opportunity to learn and do things better. The first iteration/approach will never be the best, and that's why being in a environment where I can collabroate, learn and get feedback has really extend my learning. When approaching this portfolio, I wanted to show ways in which I demonstrated curtain criteria, at some points, I couldn't really find any examples to demonstrate, so I revised some code to not just meet it but also to improve it! Navigating this portfolio really helped me fill in the weak spots and solidify the availability of tools and how to use them.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

![Collaborating on Discord for assignment 3](images/Screenshot 2025-10-26 at 8.20.49 PM.png)

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

I think these weekly pair programming activities are so important. Collaboration doesn't just connect people, but it also challenges you to listen and bring back humanity when you might feel lost and confused about curtain aspects of the class. I always find myself to be a patient and kind person, so these activities made me really think how I can help peers by effectively communicating and teaching not the most intuitive ideas.
